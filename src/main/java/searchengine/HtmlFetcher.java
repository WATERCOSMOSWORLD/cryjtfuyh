package searchengine;

import org.apache.lucene.morphology.LuceneMorphology;
import org.apache.lucene.morphology.russian.RussianLuceneMorphology;
import org.apache.lucene.morphology.english.EnglishLuceneMorphology;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import searchengine.config.SitesList;
import searchengine.model.Page;
import searchengine.model.Site;
import searchengine.model.IndexingStatus;
import searchengine.model.Lemma;
import searchengine.repository.PageRepository;
import searchengine.repository.SiteRepository;
import searchengine.repository.LemmaRepository;
import org.jsoup.Jsoup;  // –î–æ–±–∞–≤—å –≤ –∏–º–ø–æ—Ä—Ç—ã, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Jsoup
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;

@SpringBootApplication
public class HtmlFetcher implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(HtmlFetcher.class);

    private final SitesList sitesList;
    private final SiteRepository siteRepository;
    private final PageRepository pageRepository;
    private final LemmaRepository lemmaRepository;

    private LuceneMorphology russianMorphology;
    private LuceneMorphology englishMorphology;

    @Autowired
    public HtmlFetcher(SitesList sitesList, SiteRepository siteRepository, PageRepository pageRepository, LemmaRepository lemmaRepository) throws IOException {
        this.sitesList = sitesList;
        this.siteRepository = siteRepository;
        this.pageRepository = pageRepository;
        this.lemmaRepository = lemmaRepository;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
        russianMorphology = new RussianLuceneMorphology();
        englishMorphology = new EnglishLuceneMorphology();
    }

    public void fetchAll() {
        if (sitesList.getSites() == null || sitesList.getSites().isEmpty()) {
            logger.error("‚ùå –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!");
            return;
        }

        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–∞–π—Ç–æ–≤...");

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–æ–≤
        List<CompletableFuture<Void>> futures = sitesList.getSites().stream()
                .map(site -> CompletableFuture.runAsync(() -> processSite(site)))
                .collect(Collectors.toList());

        try {
            CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).get();
        } catch (InterruptedException | ExecutionException e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∞–π—Ç–æ–≤: ", e);
        }

        logger.info("üéâ –í—Å–µ —Å–∞–π—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
    }

    private void processSite(searchengine.config.ConfigSite siteConfig) {
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–∞: {}", siteConfig.getUrl());

        String html = fetchHtml(siteConfig.getUrl());

        if (html.startsWith("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞ {}: {}", siteConfig.getUrl(), html);
            return;
        }

        // –õ–æ–≥–∏—Ä—É–µ–º HTML (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
        logger.info("üìÑ HTML –∑–∞–≥—Ä—É–∂–µ–Ω (—Ñ—Ä–∞–≥–º–µ–Ω—Ç): \n{}", truncateHtml(html, 1000));

        Site savedSite = saveSiteIfNeeded(siteConfig);

        if (savedSite != null) {
            savePage(savedSite, html);
            logger.info("‚úÖ –°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {}", siteConfig.getUrl());
        } else {
            logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–π—Ç: {}", siteConfig.getUrl());
        }
    }


    private String fetchHtml(String siteUrl) {
        logger.debug("üïµÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–≥—Ä—É–∂–∞—é HTML –¥–ª—è —Å–∞–π—Ç–∞: {}", siteUrl);
        try {
            URL url = new URL(siteUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            try (Scanner scanner = new Scanner(connection.getInputStream())) {
                StringBuilder html = new StringBuilder();
                while (scanner.hasNext()) {
                    html.append(scanner.nextLine()).append("\n");
                }

                // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π HTML-–∫–æ–Ω—Ç–µ–Ω—Ç (–∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞)
                String htmlSnippet = truncateHtml(html.toString(), 500); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 500 —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                logger.debug("‚úÖ HTML –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Å–∞–π—Ç–∞: {}\n{}", siteUrl, htmlSnippet);

                return html.toString();
            }
        } catch (IOException e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞ {}: {}", siteUrl, e.getMessage());
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: " + e.getMessage();
        }
    }

    private String truncateHtml(String html, int maxLength) {
        if (html.length() > maxLength) {
            return html.substring(0, maxLength) + "\n...\n(HTML –æ–±—Ä–µ–∑–∞–Ω)";
        }
        return html;
    }

    private Site saveSiteIfNeeded(searchengine.config.ConfigSite siteConfig) {
        // –ò—â–µ–º —Å–∞–π—Ç –ø–æ URL
        Site existingSite = siteRepository.findByUrl(siteConfig.getUrl());

        if (existingSite != null) {
            logger.debug("üîÑ –°–∞–π—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {}", siteConfig.getUrl());
            return existingSite;
        } else {
            logger.info("üöÄ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Å–∞–π—Ç –¥–ª—è URL: {}", siteConfig.getUrl());
            Site newSite = new Site();
            newSite.setUrl(siteConfig.getUrl());
            newSite.setName(siteConfig.getName());
            newSite.setStatus(IndexingStatus.INDEXING); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å INDEXING –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            newSite.setStatusTime(LocalDateTime.now()); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            return siteRepository.save(newSite); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–π—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        }
    }

    private void savePage(Site site, String html) {
        logger.debug("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–∞–π—Ç–∞: {}", site.getUrl());

        Page page = new Page();
        page.setSite(site);
        page.setPath("");
        page.setContent(html);
        page.setCode(200);
        pageRepository.save(page);

        // –õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è
        Map<String, Integer> lemmaCounts = getLemmas(html);

        // –õ–æ–≥–∏—Ä—É–µ–º –ª–µ–º–º—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        logger.info("üìå –õ–µ–º–º—ã –¥–ª—è —Å–∞–π—Ç–∞ {}: {}", site.getUrl(), lemmaCounts);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–µ–º–º—ã –≤ –ë–î
        for (Map.Entry<String, Integer> entry : lemmaCounts.entrySet()) {
            Lemma lemma = new Lemma();
            lemma.setSite(site);
            lemma.setLemma(entry.getKey());
            lemma.setFrequency(entry.getValue());
            lemmaRepository.save(lemma);
        }

        logger.debug("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –ª–µ–º–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–∞–π—Ç–∞: {}", site.getUrl());
    }

    private Map<String, Integer> getLemmas(String html) {
        Map<String, Integer> lemmaCounts = new HashMap<>();

        // –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
        String text = Jsoup.parse(html).text();

        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤
        Pattern wordPattern = Pattern.compile("\\p{L}+");
        Matcher matcher = wordPattern.matcher(text);

        while (matcher.find()) {
            String word = matcher.group().toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

            if (word.matches(".*[–∞-—è–ê-–Ø—ë–Å].*")) {
                // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
                try {
                    List<String> normalForms = russianMorphology.getNormalForms(word);
                    if (!normalForms.isEmpty()) {
                        String lemma = normalForms.get(0);
                        lemmaCounts.put(lemma, lemmaCounts.getOrDefault(lemma, 0) + 1);
                    }
                } catch (Exception ignored) {}
            } else if (word.matches(".*[a-zA-Z].*")) {
                // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
                try {
                    List<String> normalForms = englishMorphology.getNormalForms(word);
                    if (!normalForms.isEmpty()) {
                        String lemma = normalForms.get(0);
                        lemmaCounts.put(lemma, lemmaCounts.getOrDefault(lemma, 0) + 1);
                    }
                } catch (Exception ignored) {}
            }
        }

        return lemmaCounts;
    }

    @Override
    public void run(String... args) {
        logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!");
        fetchAll();
    }

    public static void main(String[] args) {
        SpringApplication.run(HtmlFetcher.class, args);
    }
}
